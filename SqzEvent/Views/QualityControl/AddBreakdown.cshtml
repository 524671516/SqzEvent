@model SqzEvent.Models.BreakdownReport

<div class="navbar">
    <div class="navbar-inner">
        <div class="left">
            <a href="#" class="back link">
                <i class="icon icon-back" aria-hidden="true"></i>
                <span>返回</span>
            </a>
        </div>
        <div class="center sliding"><strong>新增故障报告</strong></div>
        <div class="right">
            <a href="javascript:;" class="link" id="addbreakdown-submit">提交</a>
        </div>
    </div>
</div>
<div class="pages">
    <div class="page" data-page="addbreakdown">
        <div class="page-content">
            @using (Html.BeginForm("AddBreakdown", "QualityControl", FormMethod.Post, new { @id = "addbreakdown-form", @class = "validate-form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Status)
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.QCStaffId)
                <div class="content-block-title">新增故障报告</div>
                <div class="list-block">
                    <ul>
                        <li>
                            <a href="#" class="item-link smart-select" data-back-text="返回" data-back-on-select="true" data-searchbar="true" data-searchbar-placeholder="选择工厂" data-searchbar-cancel="取消" id="factory-select">
                                @Html.DropDownList("FactoryId", ViewBag.FactoryDropDown as SelectList)
                                <div class="item-content">
                                    <div class="item-inner">
                                        <div class="item-title">选择工厂</div>
                                        <div class="item-after">- 请选择 -</div>
                                    </div>
                                </div>
                            </a>
                        </li>
                        <li>
                            <div class="item-content">
                                <div class="item-inner">
                                    <div class="item-title label">故障时间</div>
                                    <div class="item-input">
                                        @Html.TextBoxFor(m => m.BreakDownTime, new { placeholder = "故障时间", @class = "item-input-right" })
                                    </div>
                                </div>
                            </div>
                        </li>
                        <li>
                            <div class="item-content">
                                <div class="item-inner">
                                    <div class="item-title">上传照片</div>
                                    <div class="item-after"><abbr id="addbreakdown-imgcount">0</abbr>/7</div>
                                </div>
                            </div>
                            <div class="item-content middle-content">
                                <div class="item-inner">
                                    <div class="hidden">
                                        @Html.EditorFor(m => m.Photos)
                                    </div>
                                    <ul class="rep-imglist" id="addbreakdown-photos"></ul>
                                </div>
                            </div>
                        </li>
                        <li>
                            <div class="item-content middle-content">
                                @Html.TextAreaFor(m => m.ReportContent, new { placeholder = "请输入故障备注", @class = "required" })
                            </div>
                            <div class="item-content">
                                <div class="item-inner">
                                    <div class="item-title"></div>
                                    <div class="item-after"><span id="addbreakdown-currentlen">0</span>/<span>200</span></div>
                                </div>
                            </div>
                        </li>
                    </ul>
                </div>
            }
        </div>
    </div>
</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>BreakdownReport</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QCEquipmentId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QCEquipmentId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QCEquipmentId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BreakDownTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BreakDownTypeId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BreakDownTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QCStaffId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QCStaffId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QCStaffId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BreakDownTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BreakDownTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BreakDownTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReportTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReportTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReportTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecoveryTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecoveryTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecoveryTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Photos, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Photos, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Photos, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReportContent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReportContent, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReportContent, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecoveryRemark, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecoveryRemark, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecoveryRemark, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}